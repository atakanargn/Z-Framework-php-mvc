<?php
blank();
// error_reporting(0);
include('database/connections.php');
foreach ($databases as $key => $val) $databases[$key] = new PDO($val[0], $val[1], $val[2]);

unset($argv[0]);
$argv = array_values($argv);

function commandParser($commands = null)
{
    if (!$commands) return [];

    $data = [];
    $commands = explode(',', $commands);

    foreach ($commands as $command) {
        $command = trim($command);
        $explode = explode('=', $command);

        if (isset($explode[1]))
            $data[$explode[0]] = $explode[1];
        else
            $data[$explode[0]] = true;
    }

    return $data;
}

function setAsset($asset, $fromPath, $toPath)
{
    $asset = file_get_contents($asset);

    $fPath = $fromPath;
    if (strstr($fromPath, '/'))
        $fromPath = explode('/', $fromPath);
    elseif (strstr($fromPath, '\\'))
        $fromPath = explode('\\', $fromPath);

    $namespace = "";
    $name = $fPath;
    if (is_array($fromPath)) {
        $namespace = null;
        $fromPath_count = count($fromPath) - 1;
        foreach ($fromPath as $key => $val) {
            if ($key != $fromPath_count)
                $namespace .= "\\$val";
            else
                $name = $val;
        }
    }

    $asset = str_replace(['{namespace}', '{name}', '{table}'], [$namespace, ucfirst($name), lcfirst($name)], $asset);

    @mkdir($toPath . $namespace, 0777, true);

    $totalPath = ($toPath . $namespace . "\\$name.php");

    blank();
    if (!file_exists($totalPath)) {
        file_put_contents($totalPath, $asset);
        text("'$totalPath' created.", 32);
    } else {
        text("'$totalPath' already exists!", 31);
    }
}

function blank()
{
    echo str_repeat("\n", 50);
}

function text($text, $color = "39")
{
    echo "\e[" . $color . "m$text\n\e[39m";
}

class Make
{
    public $toPath = "app";
    public $makeAssets = "zhelper_assets/make";

    public function controller()
    {
        $args = func_get_args()[0];
        $asset = "$this->makeAssets\Controller";
        if (@$args['resource']) $asset .= "_resource";
        setAsset($asset, $args['firstCommand'], "$this->toPath\Controllers");
    }

    public function model()
    {
        $args = func_get_args()[0];
        $asset = "$this->makeAssets/Model";
        setAsset($asset, $args['firstCommand'], "$this->toPath\Models");
    }

    public function middleware()
    {
        $args = func_get_args()[0];
        $asset = "$this->makeAssets/Middleware";
        setAsset($asset, $args['firstCommand'], "$this->toPath\Middlewares");
    }

    public function migrate()
    {
        $args = func_get_args()[0];
        $asset = "$this->makeAssets/Migration";
        setAsset($asset, $args['firstCommand'], "database\migrations");
    }
}

class Db
{
    public function migrate()
    {
        global $databases;
        $args = func_get_args()[0];

        $migrations = glob('database/migrations/*.php');
        foreach ($migrations as $inc) {
            $class = include($inc);
            $class = ucfirst(strtok(@end(explode('/', $inc)), '.php'));
            if (!class_exists($class)) die(text('There are not migrate class.', 31));

            // settings
            $columns = $class::up();
            $table = $class::$table;
            $db = $databases[$class::$db];
            //
            text("\n$table migrating:", 33);

            $dropColumns = [];

            if ($args['firstCommand'] == 'fresh') {
                $initColumnName = "table_initilazing";
                $db->exec("DROP TABLE $table");
                $db->exec("CREATE TABLE $table ($initColumnName int DEFAULT 1 NOT NULL)");
            }

            $tableAttributes = $db->query("DESCRIBE $table")->fetchAll(\PDO::FETCH_COLUMN);
            foreach ($tableAttributes as $val) if (!isset($columns[$val])) $dropColumns[] = $val;


            foreach ($columns as $name => $val) {
                $options = '';
                $extras = '';

                foreach ($val as $switch) {
                    $switch = explode(':', $switch);
                    switch ($switch[0]) {
                        case 'primary':
                            $options .= "INT PRIMARY KEY AUTO_INCREMENT ";
                            // $extras .= "ADD PRIMARY KEY (`$name`) ";
                            break;

                        case 'required':
                            $options .= "NOT NULL ";
                            break;

                        case 'nullable':
                            $options .= "NULL ";
                            break;

                        case 'unique':
                            $db->exec("ALTER TABLE $table DROP index $name;");
                            $extras .= "ADD UNIQUE (`$name`) ";
                            break;

                        case 'text':
                            $options .= "TEXT ";
                            break;

                        case 'int':
                            $options .= "INT ";
                            break;

                        case 'varchar':
                            $options .= "VARCHAR(" . ($switch[1] ?? 255) . ") ";
                            break;

                        case 'default':
                            $options .= "DEFAULT" . (@$switch[1] ? "(`" . $switch[1] . "`)" : ' NULL') . " ";
                            break;

                        case 'charset':
                            $options .= "CHARACTER SET " . $switch[1] . " COLLATE " . $switch[1] . "_" . $switch[2] . " ";
                            break;
                    }
                }

                $options = trim($options);
                $extras = trim($extras);

                $buildSQL = "ALTER TABLE $table ADD $name $options" . ($extras ? ", $extras" : null) . ";";
                $query = $db->exec($buildSQL);

                if (!is_numeric($query)) {
                    $buildSQL = str_replace("$table ADD", "$table MODIFY", $buildSQL);
                    $tryModify = $db->exec($buildSQL);

                    if (!is_numeric($tryModify)) {
                        unset($tryModify);
                        text("(Maybe everything same) (Failure) $name | SQL: $buildSQL", 31);
                        continue;
                    }
                }

                text("(" . (isset($tryModify) && is_numeric($tryModify) ? 'Modified' : 'Added') . " Success) $name ", 32);
                unset($tryModify);
            }

            foreach ($dropColumns as $drop) $db->exec("ALTER TABLE $table DROP COLUMN $drop");

            text("\nMigrate finish.", 32);
        }
    }
}

$argv[0] = ucfirst($argv[0]);
call_user_func([new $argv[0], $argv[1]], array_merge(commandParser(@$argv[3]), ['firstCommand' => @$argv[2]]));