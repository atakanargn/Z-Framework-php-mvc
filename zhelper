<?php
// error_reporting(0);
define('BASE_PATH', __DIR__);
include('zFramework/modules/Functions.php');
spl_autoload_register(function ($class) {
    include("$class.php");
});
include('zFramework/vendor/autoload.php');


$databases = reloadDatabases();
$connected_databases = [];
foreach ($databases as $key => $val) $databases[$key] = new PDO($val[0], $val[1], $val[2] ?? null);

$args = array_merge(commandParser(@$argv[4]), ['firstCommand' => @$argv[3]]);
blank();

function reloadDatabases()
{
    global $connected_databases;
    $connected_databases = [];
    return include('database/connections.php');
}

function commandParser($commands = null)
{
    if (!$commands) return [];

    $data = [];
    $commands = explode(',', $commands);

    foreach ($commands as $command) {
        $command = trim($command);
        $explode = explode('=', $command);

        if (isset($explode[1])) $data[$explode[0]] = $explode[1];
        else $data[$explode[0]] = true;
    }

    return $data;
}

function setAsset($asset, $fromPath, $toPath)
{
    $asset = file_get_contents($asset);

    $fPath = $fromPath;
    if (strstr($fromPath, '/')) $fromPath = explode('/', $fromPath);
    elseif (strstr($fromPath, '\\')) $fromPath = explode('\\', $fromPath);

    $namespace = "";
    $name = $fPath;
    if (is_array($fromPath)) {
        $namespace = null;
        $fromPath_count = count($fromPath) - 1;
        foreach ($fromPath as $key => $val)
            if ($key != $fromPath_count) $namespace .= "\\$val";
            else $name = $val;
    }

    $asset = str_replace(['{namespace}', '{name}', '{table}'], [$namespace, ucfirst($name), lcfirst($name)], $asset);

    @mkdir($toPath . $namespace, 0777, true);

    $totalPath = ($toPath . $namespace . "\\$name.php");

    blank();
    if (!file_exists($totalPath)) {
        file_put_contents($totalPath, $asset);
        text("'$totalPath' created.", 32);
    } else {
        text("'$totalPath' already exists!", 31);
    }
}

function blank()
{
    echo str_repeat("\n", 50);
}

function text($text, $color = "39")
{
    echo "\e[" . $color . "m$text\n\e[39m";
}

class Make
{
    public $toPath = "app";
    public $makeAssets = "zFramework/zhelper/make";

    public function controller()
    {
        global $args;

        $asset = "$this->makeAssets\Controller";
        if (@$args['resource']) $asset .= "_resource";
        setAsset($asset, $args['firstCommand'], "$this->toPath\Controllers");
    }

    public function model()
    {
        global $args;

        $asset = "$this->makeAssets/Model";
        setAsset($asset, $args['firstCommand'], "$this->toPath\Models");
    }

    public function observer()
    {
        global $args;
        $asset = "$this->makeAssets/Observer";
        setAsset($asset, $args['firstCommand'], "$this->toPath\Observers");
    }

    public function middleware()
    {
        global $args;
        $asset = "$this->makeAssets/Middleware";
        setAsset($asset, $args['firstCommand'], "$this->toPath\Middlewares");
    }

    public function migration()
    {
        global $args;
        $asset = "$this->makeAssets/Migration";
        setAsset($asset, $args['firstCommand'], "database\migrations");
    }

    public function seeder()
    {
        global $args;
        $asset = "$this->makeAssets/Seeder";
        setAsset($asset, $args['firstCommand'], "database\seeders");
    }
}

class Db
{
    private function existsTable($dbname, $findTable)
    {
        global $databases;

        $tables = $databases[$dbname]->query("SELECT TABLE_NAME FROM information_schema.tables WHERE table_schema = '" . $dbname . "'")->fetchAll(\PDO::FETCH_ASSOC);
        foreach ($tables as $key => $table) $tables[$key] = $table['TABLE_NAME'];
        if (in_array($findTable, $tables)) return true;
        return false;
    }

    public function migrate()
    {
        global $databases, $args;
        $migrations = glob('database/migrations/*.php');

        $MySQL_defines = [
            'CURRENT_TIMESTAMP'
        ];

        foreach ($migrations as $inc) {
            $create_penetration = false;

            $class = include($inc);
            $class = str_replace(['.php'], '', ucfirst(@end(explode('/', $inc))));
            if (!class_exists($class)) die(text('There are not migrate class.', 31));

            // settings
            $columns = $class::columns();

            // Setting up 
            if (strlen($key = array_search('timestamps', $columns))) {
                unset($columns[$key]);
                $columns = array_merge($columns, [
                    'updated_at' => ['required', 'datetime', 'default:CURRENT_TIMESTAMP', 'onupdate'],
                    'created_at' => ['required', 'datetime', 'default:CURRENT_TIMESTAMP'],
                ]);
            }

            if (strlen($key = array_search('softDelete', $columns))) {
                unset($columns[$key]);
                $columns = array_merge($columns, ['deleted_at' => ['nullable', 'datetime', 'default']]);
            }
            //

            $charset = $class::$charset ?? null;
            $table = $class::$table;
            $db = $databases[$class::$db];
            //
            text("\n$table migrating:", 33);

            $dropColumns = [];

            if (!$this->existsTable($class::$db, $table)) $create_penetration = true;

            if ($args['firstCommand'] == 'fresh' || $create_penetration) {
                $initColumnName = "table_initilazing";
                try {
                    $db->exec("DROP TABLE $table");
                } catch (\PDOException $e) {
                }
                $db->exec("CREATE TABLE $table ($initColumnName int DEFAULT 1 NOT NULL)" . ($charset ? " CHARACTER SET " . strtok($charset, '_') . " COLLATE $charset" : null));
            }

            $tableAttributes = $db->query("DESCRIBE $table")->fetchAll(\PDO::FETCH_COLUMN);
            foreach ($tableAttributes as $val) if (!isset($columns[$val])) $dropColumns[] = $val;


            $lastColumn = null;
            foreach ($columns as $name => $val) {
                $data = [
                    'type' => 'INT'
                ];
                try {
                    $db->exec("ALTER TABLE $table DROP index $name;");
                } catch (\PDOException $e) {
                }

                foreach ($val as $switch) {
                    $switch = explode(':', $switch);
                    switch ($switch[0]) {
                        case 'primary':
                            $data['index'] = " PRIMARY KEY AUTO_INCREMENT ";
                            break;

                        case 'required':
                            $data['nullstatus'] = " NOT NULL ";
                            break;

                        case 'nullable':
                            $data['nullstatus'] = " NULL ";
                            break;

                        case 'unique':
                            $data['extras'][] = " ADD UNIQUE (`$name`) ";
                            break;


                            # String: start
                        case 'text':
                            $data['type'] = " TEXT ";
                            break;


                        case 'varchar':
                            $data['type'] = " VARCHAR(" . ($switch[1] ?? 255) . ") ";
                            break;

                        case 'char':
                            $data['type'] = " CHAR(" . ($switch[1] ?? 50) . ") ";
                            break;
                            # String: end


                            # INT: start
                        case 'bigint':
                            $data['type'] = " BIGINT ";
                            break;

                        case 'int':
                            $data['type'] = " INT ";
                            break;

                        case 'smallint':
                            $data['type'] = " SMALLINT ";
                            break;

                        case 'tinyint':
                            $data['type'] = " TINYINT ";
                            break;

                        case 'decimal':
                            $data['type'] = " DECIMAL ";
                            break;

                        case 'float':
                            $data['type'] = " FLOAT ";
                            break;

                            # INT: end

                            # Date: start
                        case 'date':
                            $data['type'] = " DATE ";
                            break;

                        case 'datetime':
                            $data['type'] = " DATETIME ";
                            break;

                        case 'time':
                            $data['type'] = " TIME ";
                            break;
                            # Date: end

                        case 'default':
                            $data['default'] = " DEFAULT " . (@$switch[1] ? (!in_array($switch[1], $MySQL_defines) ? ((is_numeric($switch[1]) ? $switch[1] : "('" . addslashes($switch[1]) . "')")) : (" " . $switch[1])) : ' NULL') . " ";
                            break;

                        case 'charset':
                            $data['charset'] =  " CHARACTER SET " . strtok($switch[1], '_') . " COLLATE " . $switch[1] . " ";
                            break;

                        case 'onupdate':
                            $data['default'] = $data['default'] . " ON UPDATE CURRENT_TIMESTAMP";
                            break;
                    }
                }

                $buildSQL = str_replace(['  ', ' ;'], [' ', ';'], ("ALTER TABLE $table ADD $name " . (@$data['type'] . @$data['charset'] . @$data['nullstatus'] . @$data['default'] . @$data['index']) . ($lastColumn ? " AFTER $lastColumn " : ' FIRST ') . (isset($data['extras']) ? ", " . implode(', ', $data['extras']) : null) . ";"));

                $executeType = 0;
                try {
                    $tryAdd = $db->exec($buildSQL);
                    if (strlen($tryAdd)) $executeType = 1;
                    else throw new \PDOException('TRY MODIFY', 1060);
                } catch (\PDOException $tryAddEx) {
                    if ($tryAddEx->errorInfo[1] == 1060 || array_values((array) $tryAddEx)[2] == 1060) {
                        $buildSQL = str_replace("$table ADD", "$table MODIFY", $buildSQL);

                        try {
                            $tryModify = $db->exec($buildSQL);
                            if (strlen($tryModify)) $executeType = 2;
                            else throw new \PDOException('MODIFY FAIL MAYBE PRIMARY KEY', 1068);
                        } catch (\PDOException $tryModifyEx) {
                            if ($tryModifyEx->errorInfo[1] == 1068 || array_values((array) $tryModifyEx)[2] == 1068) {
                                $lastColumn = $name;
                                unset($tryModify);
                                text("(Already Primary Key) $name", 36);
                                continue;
                            }
                        }
                    }
                }

                $types = [['Not Changed', 33], ['Added', 32], ['Modified', 32]];
                $type = $types[$executeType];

                text("(" . $type[0] . ") $name", ($type[1] ?? 31));
                unset($tryModify);

                $lastColumn = $name;
            }

            foreach ($dropColumns as $drop) {
                $db->exec("ALTER TABLE $table DROP COLUMN $drop");
                text("Dropped column: $drop", 33);
            }
            text("\nMigrate finish.", 32);
        }
    }

    public function seed()
    {
        global $databases;
        $databases = reloadDatabases();
        $seeders = glob('database/seeders/*.php');
        foreach ($seeders as $inc) {
            include($inc);
            $className = str_replace(['.php', '/'], ['', '\\'], ucfirst($inc));
            call_user_func_array([new $className(), 'seed'], []);
            text("$className seeded.", 32);
        }
    }
}

class Cache
{
    static $path = __DIR__ . '/zFramework/storage';

    public function clear()
    {
        global $argv;
        $option = $argv[3];

        $list = array_values(array_diff(scandir(self::$path), ['.', '..']));
        if (!in_array($option, $list)) die(text("Wrong Option!\nOptions: " . implode(', ', $list) . ".", 31));

        $dir = glob(self::$path . "/$option/*");
        foreach ($dir as $unlink) unlink($unlink);

        text("$option caches cleared!", 32);
    }
}

class Run
{
    public function __construct()
    {
        global $argv;

        $public = include('config/app.php');
        chdir($public['public']);

        $server = $argv[2] ?? (getHostByName(getHostName()) ?? '127.0.0.1');
        $port = $argv[3] ?? 1000;

        shell_exec("start http://$server:$port");

        echo str_repeat("\n", 100);
        echo "\e[33mServer running on \e[32m`" . getHostName() . "`\e[33m host: \e[31m\n";
        shell_exec("php -S $server:$port");
    }
}

use Workerman\Worker;

class Ws
{
    public function __construct()
    {
        $config = include('config/app.php');
        $config = $config['ws'];

        $tcp_worker = new Worker($config['protocol'] . '://' . $config['server'] . ':' . $config['port']);
        $tcp_worker->count = $config['worker-count'];

        $tcp_worker->onConnect = function ($connection) {
            text("($connection->id) New Connection", 32);
        };

        $tcp_worker->onMessage = function ($client, $data) {
            $parseData = json_decode($data, true);
            parse_str($parseData[1], $parseData[1]);

            $ws = (object) [/*'client' => $client,*/'data' => $parseData[0], 'args' => $parseData[1], 'response' => 'NULL'];
            include('ws/api.php');

            if (gettype($ws->response) != 'string') $ws->response = json_encode($ws->response, JSON_UNESCAPED_UNICODE);
            $client->send($ws->response);
        };

        $tcp_worker->onClose = function ($connection) {
            text("($connection->id) Connection Close", 31);
        };

        echo "\e[33mWebSocket running on \e[32m`" . getHostName() . "`\e[33m host: \e[31m\n";
        Worker::runAll();
    }
}

$argv[1] = ucfirst($argv[1]);
call_user_func([new $argv[1], $argv[2]], []);
